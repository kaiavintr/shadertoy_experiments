/*
    Copyright (C) 2023-2024 Kaia Vintr
    
    Code is licensed only for personal, non-commercial use on the Shadertoy
    website. You may not copy all or any part of the code into another Shadertoy
    shader (whether by using Shadertoy's "fork" feature or by some other means).
    You may not distribute or use all or any part of the code outside of
    the Shadertoy website, even if the code is accessed via the Shadertoy API or
    web server. You may not use the code or its output to train or fine-tune
    machine learning models (e.g. "AI" models). You may not use the code to
    create image or video content for publication or distribution, except
    screenshots or brief video clips of the output of the unmodified code to be
    used strictly in a manner that would be permitted as "fair use" under U.S.
    copyright law (for example, you may not use the code to create NFTs or
    YouTube videos). If any provision of these license terms is held to be
    invalid or unenforceable, that provision shall be limited to the minimum
    extent necessary, and the remaining provisions shall remain in full effect.
    
    Please contact Kaia Vintr with questions regarding this code
    via direct message to @kaiavintr.bsky.social on BlueSky (preferred)
    or @KaiaVintr on Twitter, or via a comment on this shader.
    
    URL of the Shadertoy website page where this code is intended to be used
    (page for this "shader"):
    https://www.shadertoy.com/view/DdfBDs
    
    Code is archived at:
    https://github.com/kaiavintr/shadertoy_experiments/tree/main/Bubbles
    
*/

const vec3 EXTRA_LIGHT_COLOR = vec3(0.9, 0.9, 1);
const vec3 EXTRA_LIGHT_DIR = normalize(vec3(1, 3, -2));

// Relative refractive index of bubble material
// (there is a Fresnel approximation later in the code that assumes this value)
const float IR = 1.333;

#define CUBIC(t, C0, C1, C2, C3) (C0 + (C1 + (C2 + C3*t)*t)*t)

vec3 SRGB_TO_LINEAR(vec3 C) {
    return ((0.30530*C + 0.68217)*C + 0.012523)*C;
}

vec3 LINEAR_TO_SRGB(vec3 C) {
    // Note: this is a direct translation of the sRGB definition into branch-less GLSL (other people's code likely looks similar)
    return mix(12.92*C, 1.055*pow(C, vec3(1./2.4)) - 0.055, step(0.0031308, C));
}

float rgb_to_luminance(vec3 c) {
    return dot(c, vec3(0.2126, 0.7152, 0.0722));
}

// Shift energy from clipped color components into other components, but don't modify representable colors
// Avoids unexpected cyan, yellow, and magenta pixels and tries to use correct luminance even if color is out of gamut
vec3 gamut_clip(vec3 c) {
    float maxcomp = max(max(c.r, c.g), c.b);
    
    if (maxcomp <= 1.005) {
        return c;
    } else {
        float target_luminance = rgb_to_luminance(c);
        
        vec3 representable = c / maxcomp;
        
        float representable_luminance = rgb_to_luminance(representable);
        
        // Find a color that is a linear blend between brightest representable color with same chroma + saturation as c, and white,
        //      and has same luminance as c (target_luminance).
        // If target_luminance >= 1. white will be used.
        // (1.00001 could probably be safely changed to 1. in GLSL) 
        return mix(c, vec3(1), clamp((target_luminance - representable_luminance) / (1.00001 - representable_luminance), 0., 1.));
    }
}

#define SR(C, R, T) smoothstep(C-(R), C+(R), T)

vec3 get_env_extra_light(vec3 V, float r) {
    if (V.y < 0.) return vec3(0);
    
    r /= V.y;
    
    float mask;
    
    {
        vec2 p = V.zx / V.y;
    
        {
            vec2 d = vec2(0.06, -1.75) - p;
            p += 0.25*d * smoothstep(-0.04 ,0., -dot(d, d));
        }

        float x_left = -0.2845 - 0.0075*p.y;
        float x_right = 0.28 - 0.005*p.y;
        
        float f_left = SR(x_left, r, p.x);
        float f_split_y = SR(-2.45, 2.*r + 0.1, p.y);

        mask = (f_left - SR(x_right, r, p.x)) * (f_split_y - SR(2.04, 2.*r, p.y));
        
        float x_left2 = -0.01132 - 0.014*p.y;
        float x_right2 = -0.029 - 0.0775*p.y;
        float r4 = r+0.02;
        
        float f_inner_x = SR(x_left2, r4, p.x);

        mask -= (f_inner_x - SR(x_right2, r4, p.x)) * (f_split_y - SR(-1.38, r + 0.05, p.y));

        mask += (f_left - f_inner_x) * (SR(-2.7, 2.*r + 1., p.y) - f_split_y);
    }
    
    if (mask < 0.001) {
        return vec3(0);
    } else {
        float m = dot(V, EXTRA_LIGHT_DIR);
        float m2 = m*m;

        return mask * (m + (4. + 8.*m2)*m2)*(0.25*EXTRA_LIGHT_COLOR);
    }
}

vec3 get_env(vec3 V, float lod_texture, float extra_light_blur) {
    vec3 c = vec3(0);
    
    #if BLACK_BACKGROUND==0
    c = SRGB_TO_LINEAR(textureLod(iChannel0, V, lod_texture).rgb);
    #endif
    
    return c + get_env_extra_light(V, extra_light_blur);
}

vec3 transmittance_part1(float a) {
    float x = 1. - a;
    
    // Fresnel approximation for IR=1.333:
    float R = 0.0204 + (0.27549959 + (-1.99019346 + (6.71395947 + (-8.78836758 + 4.76508694*x)*x)*x)*x)*(x*x);
    
    float c1 = 1. + R*R;
    float c2 = 2.*R;
    float scale = 1. / (c1 - c2); 

    return vec3(scale*c1, scale*c2, sqrt(1. - 1./(IR*IR) * (1. - a*a)));
}

vec3 transmittance_part2(float c1, float c2, float adjusted_thickness) {
    // Compute transmittance for 8 wavelengths of light, and then use linear combinations for
    //      the RGB values (yes, I tried a "spectral" version of the code with 8 wavelengths, and it
    //      was very difficult to find any places where it made a difference)
    vec4 A = 1. / (c1 - c2*cos( 4.*PI*IR/vec4(423.7, 446.0, 470.4, 501.4) * adjusted_thickness));
    vec4 B = 1. / (c1 - c2*cos( 4.*PI*IR/vec4(533.5, 567.8, 605.09, 645.7) * adjusted_thickness));

    return clamp(vec3(
        0.029*A.x + 0.049*A.y - 0.046*A.z - 0.216*A.w - 0.245*B.x + 0.299*B.y + 0.802*B.z + 0.328*B.w,
        -0.023*A.x - 0.052*A.y + 0.015*A.z + 0.221*A.w + 0.489*B.x + 0.363*B.y + 0.020*B.z - 0.033*B.w,
        0.182*A.x + 0.473*A.y + 0.383*A.z + 0.076*A.w - 0.049*B.x - 0.047*B.y - 0.018*B.z
    ), 0., 1.);
}

float gyroid(vec3 p) {
    return dot(sin(p), cos(p.yzx));
}

vec3 gyroid3d(vec3 p) {
    vec3 a = sin(p) * cos(p.yzx);
    
    return a.yxx + a.zzy;
}

float get_extra_light_radius(vec3 pix, vec3 V, mat3 camera) {
    float ry = 1./V.y;
    
    vec4 d = vec4(camera[0].zx - ry * camera[0].y * V.zx,
                  camera[1].zx - ry * camera[1].y * V.zx);

    return sqrt(dot(d, d) / (dot(pix.xy, pix.xy) + pix.z*pix.z) + 0.02*0.02);
}

void sample_edge_reflect(int max_count, float scale, float b_center, vec3 U, vec3 V, float texture_lod, float extra_light_blur, out vec3 c_front, out vec3 c_back) {
    float kernel_size = 3. * scale;
    
    float mint = b_center - 0.5*kernel_size;
    float maxt = b_center + 0.5*kernel_size;
    
    int count = max_count + min(0, iFrame) - 1;
    
    if (maxt > 0.9999995) {
        maxt = 0.9999995;
        count += 1;
    }
    
    float b_inc = (1./float(max_count)) * (maxt-mint);
    float b = b_inc + mint;
    float u = (b - b_center)/kernel_size + 0.5;
    float u_inc = b_inc/kernel_size;

    float total_w = 0.;
    vec3 c1 = vec3(0);
    vec3 c2 = vec3(0);
    
    for (int i = 0; i < count; i++) {
        float p = 2.*b*b - 1.;
        float q = sqrt(1. - p*p);
        
        float w = u - u*u;

        vec3 R = p*V - q*U;
        
        c1 += w * get_env(R, texture_lod, extra_light_blur);

        R = p*V + q*U;

        c2 += w * get_env(R, texture_lod, extra_light_blur);
        
        total_w += w;
        
        b += b_inc;
        u += u_inc;
    }
    
    float n = 1./total_w;
    
    c_front = n * c1;
    c_back = n * c2;
}

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
    vec3 V;
    float pix_scale, bg_extra_light_r, brightness, focus_distance;
    
    {
        vec3 V0 = vec3(fragCoord.xy - 0.5*iResolution.xy, VIEW_ANGLE_FACTOR*iResolution.y);
        
        pix_scale = 1./length(V0);
    
        mat3 camera = make_camera(iMouse, iResolution);

        V = camera * pix_scale * V0;
    
        bg_extra_light_r = get_extra_light_radius(V0, V, camera);
        
        brightness = 1. - 0.5*max(0., (camera * vec3(0,0,1)).y);
        
        focus_distance = get_focus_distance(camera*vec3(0,0,1));
    }
    
    // Get the set of IDs for bubbles that this view ray might intersect
    // If using 16-bit floating point compatible values, need to fetch two values and decode
    // Keep the 8 values packed into halves of the 32-bit uints, to reduce register pressure.
    uvec4 idset;
    
    {
        ivec2 index = ivec2(floor(fragCoord)) >> BLOCK_SHIFT;
        
        #if FP16_COMPATIBLE
        index.y *= 2;
        
        uvec4 idset1 = (floatBitsToUint(texelFetch(iChannel1, index, 0)) - 0x39000000u) >> 13;
        uvec4 idset2 = floatBitsToUint(texelFetch(iChannel1, index + ivec2(0, 1), 0)) - 0x39000000u;
        
        uint sign = idset2.w & 0x80000000u;
        
        idset2 &= 0x7fffe000u;
        
        idset = idset1 | (idset2 << 3);
        
        idset.w |= sign;
        #else
        idset = floatBitsToUint(texelFetch(iChannel1, index, 0));
        #endif
    }
    
    uint visit_count;
    
    if ((idset.w & 0x80000000u) == 0u) { // idset only contains individual IDs (up to 8 IDs)
        // Not really necessary (could just break out of the loop as soon as a 0 is found) but I've noticed
        //      that sometimes loops with breaks are not optimized well by the compiler, so this seemed like a good idea.
        
        // Get a 1 in the low bit of each block of 16 bits if it's non zero
        
        uvec4 c = idset | (idset >> 1);
        
        c |= c >> 2;
        c |= c >> 4;
        c |= c >> 8;
        
        // Count the 1s in the low bits of the blocks
        c = (c & 1u) + ((c >> 16) & 1u);
        
        visit_count = c.x + c.y + c.z + c.w;
    } else { // idset contains 6 individual IDs and a range (stored in idset.w)
        visit_count = uint(min(MAX_BUBBLE_COUNT, int(7u + (((idset.w >> 16) - idset.w) & 0x7fffu))));
    }
    
    uint id_lower_bound = uint(max(0, int(floor(TIME / BUBBLE_ID_TIME_INCREMENT)) - (MAX_BUBBLE_COUNT + 1)));
    
    float dist1=1e20, dist2=1e20, dist3=1e20;
    // Order-independent trasparency, tracking up to 3 layers
    // transmN is transmittance, i.e. 1. - alpha (but separate for each color channel)
    vec3 color1 = vec3(0), transm1 = vec3(1);
    vec3 color2 = vec3(0), transm2 = vec3(1);
    vec3 color3 = vec3(0), transm3 = vec3(1);
    
    float extra_light_blur_base = 0.03 * max(450. / iResolution.y, 1.);
    
    for (uint i = 0u; i < visit_count; i++) {
        uint id;
        
        if (i < 7u || (idset.w & 0x80000000u) == 0u) {
            if (i < 4u) {
                id = i <= 1u ? idset.x : idset.y;
            } else {
                id = i <= 5u ? idset.z : idset.w;
            }
            
            id = (i & 1u) == 0u ? id : (id >> 16);
        } else {
            id = idset.w + i - 6u;
        }
        
        id = (id & 0x7fffu) + id_lower_bound;
        
        float fid = float(id);
        
        float offset_t = -TIME + BUBBLE_ID_TIME_INCREMENT*fid;
        
        float x = PATH_CENTER.x + SPEED_X*offset_t;
        
        float radius = get_radius(fid);
        
        uint hash;
        vec3 center = vec3(x, get_bubble_center_yz(offset_t, id, hash));

        float proj = dot(V, center);
        
        float pop_dist = PATH_CENTER.x + 0.5*DISTANCE_MAX - 1.25*DISTANCE_MAX*HASH_EXTRACT_FULL(hash);
        
        if (x > pop_dist && proj > 0. && proj < DISTANCE_MAX && dot(center, center) > radius*radius) {
            vec3 U = center - proj*V;

            float dist_from_center = length(U);

            U /= dist_from_center;
            
            float conf = APERTURE * APERTURE_REFERENCE * abs(proj - focus_distance) / proj;
            
            float blur_amount = iResolution.y * conf;

            blur_amount = sqrt(1. + blur_amount*blur_amount);
            
            float blur_scale = pix_scale * proj * blur_amount;

            float pix_dist_blurred = (dist_from_center - radius) / blur_scale;
                
            if (pix_dist_blurred < 0.75) {
                vec3 W = V;
                
                if (pix_dist_blurred > -0.75) {
                    float shift = blur_scale * CUBIC(pix_dist_blurred, -0.27758603, -0.56839415, -0.1731804, 0.1215896);
                    
                    W = normalize(center - (dist_from_center + shift) * U);

                    proj = dot(W, center);
                    
                    vec3 W0 = normalize(center);
                    
                    if (dot(W,V) < dot(W0,V)) {
                        W = W0;
                        proj = dot(W, center);
                    }
                    
                    U = center - proj*W;

                    dist_from_center = length(U);

                    U /= dist_from_center;
                }
                
                float this_dist = proj - sqrt(proj*proj -  dot(center, center) + radius*radius);

                if (this_dist > 0.) {
                    vec3 refl_front, refl_back, refl3, t_front, t_back;
                    float lod_base;
                    
                    {
                        vec3 N_front, N_back;
                        float a;
                        
                        {
                            float b;
                            
                            {
                                float rr = 1./radius;

                                b = dist_from_center * rr;
                                a = sqrt(1. - b*b);
                                
                                lod_base = 2. * rr * pix_scale * proj / sqrt(1. - b*b);
                            }

                            N_front = -a*W - b*U;
                            N_back = a*W - b*U;
                            
                            float p = b*b - a*a; // = 2*b*b - 1 = 1 - 2*a*a
                            float q = 2.*a*b; // = sqrt(1 - p*p)
                            
                            refl_front = p*W - q*U;
                            refl_back = p*W + q*U;
                            
                            float p3 = p*p - q*q;
                            float q3 = 2.*p*q;
                            
                            refl3 = p3*W +  q3*U;
                        }
                        
                        {
                            float thickness_front, thickness_back;
                            
                            {
                                vec4 h = HASH_EXTRACT_VEC4(hash); // low value already used
                                
                                float thickness = 63. + 875.*min(1., (x - pop_dist) / DISTANCE_MAX)*h.y;
                                
                                float thickness_vary = thickness*(0.125 + 0.63*h.z);
                                
                                thickness_front = thickness + thickness_vary*pow(-radius*N_front.y + 2. + radius, 0.5);
                                thickness_back = thickness + thickness_vary*pow(-radius*N_back.y + 2. + radius, 0.5);
                            }

                            float ripple_scale = 1. - smoothstep(0.0, 0.01, conf);
                            
                            if (ripple_scale > 0.) {
                                vec3 offsetF = radius*N_front;
                                vec3 offsetB = radius*N_back;
                                
                                {
                                    vec3 tmp = 1.4*TIME + vec3(3., 2., 1.);
                                    
                                    offsetF += 0.1 * gyroid3d(2.*offsetF + tmp);
                                    offsetB += 0.1 * gyroid3d(2.*offsetB + tmp);
                                }
                                
                                {
                                    vec3 tmp = 2.2*TIME + vec3(3., 1., 7.);
                                    
                                    offsetF += 0.2 * gyroid3d(5.*offsetF + tmp);
                                    offsetB += 0.2 * gyroid3d(5.*offsetB + tmp);
                                }
                                
                                {
                                    vec3 tmp = 3.6*TIME + vec3(1.5, 5., 0.4);
                                    float s = 0.5*ripple_scale;
                                    
                                    offsetF += s * gyroid3d(11.*offsetF + tmp);
                                    offsetB += s * gyroid3d(11.*offsetB + tmp);
                                }
                                
                                {
                                    vec3 tmp = 0.02*TIME + vec3(2., 1.7, 2.5);
                                    
                                    thickness_front *= 1. + 0.02*ripple_scale*gyroid(1.7*offsetF + tmp);
                                    thickness_back *= 1. + 0.02*ripple_scale*gyroid(1.7*offsetB + tmp);
                                }
                            }
                            
                            {
                                vec3 part1 = transmittance_part1(a);
                                
                                t_front = transmittance_part2(part1.x, part1.y, part1.z*thickness_front);
                                t_back = transmittance_part2(part1.x, part1.y, part1.z*thickness_back);
                            }
                        }
                    }
                    
                    vec3 env_front, env_back, env3;
                    
                    {
                        float lod = lod_base * blur_amount;
                        
                        float texture_lod = log2(lod) + 8.;
                        float extra_light_blur = sqrt(lod*lod + extra_light_blur_base*extra_light_blur_base);

                        float scaled_conf = iResolution.y * conf;

                        if (scaled_conf * scaled_conf > 1.) {
                            env_front = get_env(refl_front, texture_lod, extra_light_blur);
                            env_back = get_env(refl_back, texture_lod, extra_light_blur);
                        } else {
                            float lod_min = lod_base * scaled_conf;
                            float texture_lod_min = log2(lod_min) + 8.;
                            float extra_light_blur_min = sqrt(lod_min*lod_min + extra_light_blur_base*extra_light_blur_base);
                            
                            float rr = 1. / radius;
                            float b = dist_from_center * rr;
                            
                            float d = b*b;
                
                            sample_edge_reflect(1 + int(clamp(ceil(5.*d), 1., 5.)),
                                pix_scale * proj * rr,  b, U, W, 
                                max(texture_lod_min, texture_lod - 2.5 * d),
                                max(extra_light_blur_min, extra_light_blur / (1. + 2.*d)),
                                env_front, env_back
                                );
                        }
                        
                        env3 = get_env(refl3, texture_lod + 1., 2.*extra_light_blur);
                    }
                    
                    float coverage = smoothstep(-0.75, 0.75, -pix_dist_blurred);

                    vec3 this_color = coverage * mix(
                            env_front,
                            (1.-t_back)*mix(env3, env_back, 0.5*(t_front + t_back)),
                            t_front);
                    
                    vec3 this_transmit = 1. - coverage + coverage*t_front*t_back;
                    
                    if (this_dist < dist2) {
                        color3 = color2 + transm2*color3;
                        transm3 = transm2*transm3;
                        dist3 = dist2;
                        
                        if (this_dist < dist1) {
                            color2 = color1;
                            transm2 = transm1;
                            dist2 = dist1;
                            color1 = this_color;
                            transm1 = this_transmit;
                            dist1 = this_dist;
                        } else {
                            color2 = this_color;
                            transm2 = this_transmit;
                            dist2 = this_dist;
                        }
                    } else {
                        color3 = this_dist < dist3 ? this_color + this_transmit*color3 : color3 + transm3*this_color;
                        transm3 =  this_transmit*transm3;
                        dist3 = min(this_dist, dist3);
                    }
                }
            }
        }
    }

    vec3 background = get_env(V, 0., bg_extra_light_r);
    
    vec3 color = transm1*(transm2*(transm3*background + color3) + color2) + color1;
    
    fragColor = vec4(LINEAR_TO_SRGB(gamut_clip(brightness*color)), 1.);
}
