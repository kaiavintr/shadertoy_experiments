/*
    Copyright (C) 2024-2025 Kaia Vintr
    
    LICENSE:
    Code is licensed only for personal, non-commercial use on the Shadertoy
    website. You may not copy all or any part of the code into another Shadertoy
    shader (whether by using Shadertoy's "fork" feature or by some other means).
    You may not distribute or use all or any part of the code outside of
    the Shadertoy website, even if the code is accessed via the Shadertoy API or
    web server. You may not use the code or its output to train or fine-tune
    machine learning models (e.g. "AI" models). You may not use the code to
    create image or video content for publication or distribution, except
    screenshots or brief video clips of the output of the unmodified code to be
    used strictly in a manner that would be permitted as "fair use" under U.S.
    copyright law and with attribution to Kaia Vintr (for example, you may not
    use the code to create NFTs or YouTube videos). If any provision of these
    license terms is held to be invalid or unenforceable, that provision shall
    be limited to the minimum extent necessary, and the remaining provisions
    shall remain in full effect.
    
    Please contact Kaia Vintr with questions regarding this code
    via direct message to @kaiavintr.bsky.social on Bluesky (preferred)
    or @KaiaVintr on X (use only if necessary), or via a comment on this shader.
    
    URL of the Shadertoy website page where this code is intended to be used
    (page for this "shader"):
    https://www.shadertoy.com/view/lX2fDy
    
    Code is archived at:
    https://github.com/kaiavintr/shadertoy_experiments/tree/main/ClassicalRadiosityTest/MultiFrameVersion
    
*/

// Various things are configurable -- see Common

// Gather light from all surfaces, except in first pass.

// Messy because parts of the loop are specialized to improve performance.

// iChannel0 is output of previous pass (prev. content of BufferA)
// iChannel1 contains sphere and light locations (BufferB)

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
    int x = int(fragCoord.x);
    int y = int(fragCoord.y);
    
    if (y >= BUFFER_A_TOTAL_ROW_COUNT || x >= MESH_X_COUNT) {
        fragColor = vec4(0);
        return;
    }
    
    // Outputs of the passes (Jacobi iterations) are stacked on top of one another in the buffer
    // Values at the top (pass_number == 0) contain just the emitted light.
    //     (Could skip this pass (merge it with the first pass) but I wanted to simplify the code.)

    // If this is the first frame, just pretend it's pass 0 (so we fill the buffer with usable data)
    
    bool is_first_frame = (iFrame == 0 || texelFetch(iChannel1, ivec2(BUFFER_B_MAGIC_NUMBER, BUFFER_B_MISC_DATA_ROW), 0) != MAGIC_NUMBER);
    
    int pass_number = is_first_frame ? 0 : (y >> MESH_SQUARE_ROWS_SHIFT);
    
    y &= MESH_SQUARE_ROWS - 1;
    
    // Each pass has its own "misc. data row" in BufferB
    vec3 sphere_c = is_first_frame ? SPHERE_INITIAL_POSITION : texelFetch(iChannel1, ivec2(BUFFER_B_SPHERE_CURRENT_POSITION, BUFFER_B_MISC_DATA_ROW + pass_number), 0).rgb;
    
    bool is_sphere = x >= MESH_X_OFFSET_SPHERE;

    int base = is_sphere ? MESH_X_OFFSET_SPHERE : (x & ~(MESH_SQUARE_COLUMNS-1));
    int columns = is_sphere ? MESH_SPHERE_COLUMNS : MESH_SQUARE_COLUMNS;

    x -= base;
    base *= MESH_SQUARE_ROWS;
    
    int receiving_patch_index = base + y*columns + x;
    
    vec3 sum = vec3(0);
    
    // For passes after pass 0 (which just sets emitted light), use some rather coarse numeric integration iterations to
    //      compute the value of the Jacobi iteration for this patch (but we don't multiply by area or albedo yet)
    if (pass_number != 0) {
        int prev_pass_y_offset = (pass_number - 1) * MESH_SQUARE_ROWS;

        if (base != MESH_OFFSET_SPHERE) {
            vec3 N1 = get_normal_for_patch_not_sphere(receiving_patch_index);
            
            vec3 P1_a = get_point_for_patch_not_sphere(receiving_patch_index, base, 0.25, 0.25);
            vec3 P1_b = get_point_for_patch_not_sphere(receiving_patch_index, base, 0.25, 0.75);
            vec3 P1_c = get_point_for_patch_not_sphere(receiving_patch_index, base, 0.75, 0.25);
            vec3 P1_d = get_point_for_patch_not_sphere(receiving_patch_index, base, 0.75, 0.75);
            
            // Indexes of patches for which form factor is precomputed
            ivec2 edge_ff = get_edge_form_factor_indexes(base, x, y);
            
            // Precomputing some things to speed up the shadow checks in the inner loop
            vec3 sph_delta_a = P1_a-sphere_c;
            vec3 sph_delta_b = P1_b-sphere_c;
            vec3 sph_delta_c = P1_c-sphere_c;
            vec3 sph_delta_d = P1_d-sphere_c;
            
            float sph_val_a = dot(sph_delta_a,sph_delta_a) - SPHERE_RADIUS*SPHERE_RADIUS;
            float sph_val_b = dot(sph_delta_b,sph_delta_b) - SPHERE_RADIUS*SPHERE_RADIUS;
            float sph_val_c = dot(sph_delta_c,sph_delta_c) - SPHERE_RADIUS*SPHERE_RADIUS;
            float sph_val_d = dot(sph_delta_d,sph_delta_d) - SPHERE_RADIUS*SPHERE_RADIUS;

            int end_index = base == MESH_OFFSET_BACK ? MESH_OFFSET_BACK : MESH_OFFSET_SPHERE;
            
            for (int index_src = 0; index_src < min(0, iFrame) + end_index; index_src++) {
                if (index_src == base) index_src += MESH_COUNT_SQUARE;
                
                float ffsum = 0.0;
                vec3 N2 = get_normal_for_patch_not_sphere(index_src);
                int base_src = get_mesh_base_index(index_src);
                
                for (float sample_i = 0.25; sample_i < 1.; sample_i += 0.5) {
                    for (float sample_j = 0.25; sample_j < 1.; sample_j += 0.5) {
                        vec3 P2 = get_point_for_patch_not_sphere(index_src, base_src, sample_i, sample_j);
                        
                        ffsum += form_factor(sph_delta_a, sph_val_a, P1_a, P2, N1, N2, true);
                        ffsum += form_factor(sph_delta_b, sph_val_b, P1_b, P2, N1, N2, true);
                        ffsum += form_factor(sph_delta_c, sph_val_c, P1_c, P2, N1, N2, true);
                        ffsum += form_factor(sph_delta_d, sph_val_d, P1_d, P2, N1, N2, true);
                    }
                }
                
                // Form factor for pair of squares that are at right angles to one another, sharing an edge
                // Value is expected to be multiplied by -PI * 16. (factor is divided out at the end of the loop)
                // Value is also expected to be divided by receiving patch area (we multiply by area later to get flux)
                //      hence the multiplication by SQUARE_PATCH_RECIPROCAL_AREA
                if (index_src==edge_ff.x || index_src==edge_ff.y) {
                    ffsum = -PI * 16. * 0.200044 * SQUARE_PATCH_RECIPROCAL_AREA;
                }
                
                // Get outbound flux for patch (radiosity times patch area)
                vec3 rad = texelFetch(iChannel0, get_row_and_column(false, index_src - base_src) + ivec2(base_src >> 4, prev_pass_y_offset), 0).rgb;
                
                sum += rad * ffsum;
            }
            
            for (int index_src = MESH_OFFSET_SPHERE; index_src < min(0, iFrame) + MESH_COUNT; index_src++) {
                float ffsum = 0.0;
            
                for (float sample_i = 0.25; sample_i < 1.; sample_i += 0.5) {
                    for (float sample_j = 0.25; sample_j < 1.; sample_j += 0.5) {
                        vec3 N2;
                        vec3 P2 = get_point_for_patch_on_sphere(sphere_c, index_src, sample_i, sample_j, N2);
                    
                        ffsum += form_factor_no_sphere_check(P1_a, P2, N1, N2);
                        ffsum += form_factor_no_sphere_check(P1_b, P2, N1, N2);
                        ffsum += form_factor_no_sphere_check(P1_c, P2, N1, N2);
                        ffsum += form_factor_no_sphere_check(P1_d, P2, N1, N2);
                    }
                }

                // Get outbound flux for patch (radiosity times patch area)
                vec3 rad = texelFetch(iChannel0, get_row_and_column(true, index_src - MESH_OFFSET_SPHERE) + ivec2(MESH_X_OFFSET_SPHERE, prev_pass_y_offset), 0).rgb;
            
                sum += rad * ffsum;
            }
        } else {
            vec3 N1_a;
            vec3 P1_a = get_point_for_patch_on_sphere(sphere_c, receiving_patch_index, 0.25, 0.25, N1_a);
            
            vec3 N1_b;
            vec3 P1_b = get_point_for_patch_on_sphere(sphere_c, receiving_patch_index, 0.25, 0.75, N1_b);

            vec3 N1_c;
            vec3 P1_c = get_point_for_patch_on_sphere(sphere_c, receiving_patch_index, 0.75, 0.25, N1_c);

            vec3 N1_d;
            vec3 P1_d = get_point_for_patch_on_sphere(sphere_c, receiving_patch_index, 0.75, 0.75, N1_d);
            
            for (int index_src = 0; index_src < min(0, iFrame) + MESH_OFFSET_SPHERE; index_src++) {
                vec3 N2 = get_normal_for_patch_not_sphere(index_src);
                int base_src = get_mesh_base_index(index_src);
                
                float ffsum = 0.0;
                
                for (float sample_i = 0.25; sample_i < 1.; sample_i += 0.5) {
                    for (float sample_j = 0.25; sample_j < 1.; sample_j += 0.5) {
                        vec3 P2 = get_point_for_patch_not_sphere(index_src, base_src, sample_i, sample_j);
                        
                        ffsum += form_factor_no_sphere_check(P1_a, P2, N1_a, N2);
                        ffsum += form_factor_no_sphere_check(P1_b, P2, N1_b, N2);
                        ffsum += form_factor_no_sphere_check(P1_c, P2, N1_c, N2);
                        ffsum += form_factor_no_sphere_check(P1_d, P2, N1_d, N2);
                    }
                }

                // Get outbound flux for patch (radiosity times patch area)
                vec3 rad = texelFetch(iChannel0, get_row_and_column(false, index_src - base_src) + ivec2(base_src >> 4, prev_pass_y_offset), 0).rgb;
                
                sum += rad * ffsum;
            }
        }
    }
    
    // Get irradiance from the integration performed by the above loops
    // 1./16. is the divisor for the integration sampling (which wasn't multiplied in the loop)
    // -1./PI is another factor that was omitted for performance reasons
    // PATCH_FLUX_DECODE_SCALE is a decoding factor that should have been applied to values fetched from the buffer
    vec3 final_color = -1./PI * 1./16. * PATCH_FLUX_DECODE_SCALE * sum;
    
    // Multiply irradiance by albedo to get reflected part of radiosity
    final_color *= get_albedo(base);
    
    // Add radiant exitance (emitted component of radiosity) if any, to get total radiosity
    {
        int light_side;
        ivec2 light_i_minmax, light_j_minmax;
        
        // If BufferB hasn't been initialized yet, use initial light position
        if (is_first_frame) { 
            light_side = LIGHT_SIDE_INITIAL;
            light_i_minmax = LIGHT_I_MINMAX_INITIAL;
            light_j_minmax = LIGHT_J_MINMAX_INITIAL;
        } else {
            ivec2 val = floatBitsToInt(texelFetch(iChannel1, ivec2(BUFFER_B_LIGHT_DATA, BUFFER_B_MISC_DATA_ROW + pass_number), 0).xy);
            
            light_side = unpack_light_side(val.x);
            light_i_minmax = unpack_light_minmax(val.x);
            light_j_minmax = unpack_light_minmax(val.y);
        }
        
        if (base == light_side*MESH_COUNT_SQUARE && x >= light_j_minmax.x && x <= light_j_minmax.y && y >= light_i_minmax.x && y <= light_i_minmax.y) {
            final_color += get_light_scale(light_i_minmax, light_j_minmax) * LIGHT_AMOUNT;
        }
    }
    
    // Compute outbound flux by multiplying by area (larger patches reflect more light and emit more light)
    // Storing flux instead of radiosity because it avoids having to multiply by area when the values are used in the next pass
    //      (which would be expensive for the sphere patches)
    // Need to also multiply by some large number because otherwise the values are too small for 16-bit floating point
    final_color *= PATCH_FLUX_ENCODE_SCALE * area_for_patch(receiving_patch_index);

    fragColor = vec4(final_color, 1.0);
}

