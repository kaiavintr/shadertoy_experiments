/*
    Copyright (C) 2024 Kaia Vintr
    
    Code is licensed only for personal, non-commercial use on the Shadertoy
    website. You may not copy all or any part of the code into another Shadertoy
    shader (whether by using Shadertoy's "fork" feature or by some other means).
    You may not distribute or use all or any part of the code outside of
    the Shadertoy website, even if the code is accessed via the Shadertoy API or
    web server. You may not use the code or its output to train or fine-tune
    machine learning models (e.g. "AI" models). You may not use the code to
    create image or video content for publication or distribution, except
    screenshots or brief video clips of the output of the unmodified code to be
    used strictly in a manner that would be permitted as "fair use" under U.S.
    copyright law (for example, you may not use the code to create NFTs or
    YouTube videos). If any provision of these license terms is held to be
    invalid or unenforceable, that provision shall be limited to the minimum
    extent necessary, and the remaining provisions shall remain in full effect.
    
    Please contact Kaia Vintr with questions regarding this code
    via direct message to @kaiavintr.bsky.social on BlueSky (preferred)
    or @KaiaVintr on Twitter, or via a comment on this shader.
    
    URL of the Shadertoy website page where this code is intended to be used
    (page for this "shader"):
    https://www.shadertoy.com/view/lX2fDy
    
    Code is archived at:
    https://github.com/kaiavintr/shadertoy_experiments/tree/main/ClassicalRadiosityTest/MultiFrameVersion
    
*/


// Various things are configurable -- see Common

// Compute radiosity values to use for rendering.

// BufferB also stores the sphere position and velocity, and the light position, so this shader updates those

// iChannel0 is output of Jacobi iterations (BufferA)
// iChannel1 is previous content of BufferB

uint hash_fn1(uint h) { // fmix32 with added constant for seed
    h ^= h >> 16;

    h = h*0x85ebca6bu + HASH_SEED;

    h ^= h >> 13;

    h = h*0xc2b2ae35u;

    return h ^ (h >> 16);
}

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
    int x = int(fragCoord.x);
    int y = int(fragCoord.y);
    
    if (y >= BUFFER_B_TOTAL_ROW_COUNT || x >= MESH_X_COUNT) {
        // Most of this code updates the first row of "misc. data" values, which is used by pass 0 in the next frame.
        // The other passes will use older values, so we shift the rows down.
        
        if (y == BUFFER_B_MISC_DATA_ROW && x == BUFFER_B_MAGIC_NUMBER) { // Update magic number in the first misc. data row, to prove that BufferB has been written
            fragColor = MAGIC_NUMBER;
        } else if (y == BUFFER_B_MISC_DATA_ROW && x == BUFFER_B_LIGHT_DATA) { // Update light position in the first misc. data row
            bool use_initial_data = iFrame == 0 || texelFetch(iChannel1, ivec2(BUFFER_B_MAGIC_NUMBER, BUFFER_B_MISC_DATA_ROW), 0) != MAGIC_NUMBER;
            
            // Get value from the previous frame (which will be invalid if this is the first frame)
            vec2 prev_val = texelFetch(iChannel1, ivec2(BUFFER_B_LIGHT_DATA, BUFFER_B_MISC_DATA_ROW), 0).xy;
            
            // Light position gets changed every LIGHT_CHANGE_INTERVAL seconds, so assign an integer sequence number to each interval and check if
            //      current number is different from last number (which must be encoded in a way supported by 16-bit float buffers).
            
            int prev_seqnum = (floatBitsToInt(texelFetch(iChannel1, ivec2(BUFFER_B_LIGHT_CURRENT_SEQNUM, BUFFER_B_MISC_DATA_ROW), 0).x) >> 13) & 0x3fff;
            
            vec2 new_val = prev_val;
            
            int seqnum = int(1./LIGHT_CHANGE_INTERVAL * iTime);
            
            if (use_initial_data || (seqnum & 0x3fff) != prev_seqnum) {
                ivec2 ival;
                
                if (use_initial_data) {
                    ival = pack_light_info(LIGHT_SIDE_INITIAL, LIGHT_I_MINMAX_INITIAL, LIGHT_J_MINMAX_INITIAL);
                } else {
                    #if MORE_RANDOM_LIGHT_POSITIONS
                    uint h = hash_fn1(uint(iDate.w*1024.0));
                    #else
                    uint h = hash_fn1(uint(seqnum));
                    #endif
                    
                    int side = int(h&63u);
                    
                    // Getting value mod 5 (probably a silly way to do it)
                    if (side >= 40) side -= 40;
                    if (side >= 20) side -= 20;
                    if (side >= 10) side -= 10;
                    if (side >= 5) side -= 5;
                    
                    ivec2 ivals = ivec2((h>>6)&15u, (h>>10)&15u);
                    ivec2 jvals = ivec2((h>>14)&15u, (h>>18)&15u);
                    
                    if (ivals.x > ivals.y) ivals = ivals.yx;
                    if (jvals.x > jvals.y) jvals = jvals.yx;
                    
                    ival = pack_light_info(side, ivals, jvals);
                }
                
                new_val = intBitsToFloat(ival);
            }
            
            fragColor = vec4(new_val, 0., 0.);
        } else if (y == BUFFER_B_MISC_DATA_ROW && x == BUFFER_B_LIGHT_CURRENT_SEQNUM) {
            // Store the current light position sequence number so we can test if it has changed in the next frame
            fragColor = vec4(intBitsToFloat((int(1./LIGHT_CHANGE_INTERVAL * iTime)<<13) | 0x40000000), 0., 0., 0.);
        } else if (y == BUFFER_B_MISC_DATA_ROW && x <= BUFFER_B_SPHERE_DATA_MAX) { // Update sphere position in the first misc. data row
        
            // Check if previous frame data is valid
            bool use_initial_data = iFrame == 0 || texelFetch(iChannel1, ivec2(BUFFER_B_MAGIC_NUMBER, BUFFER_B_MISC_DATA_ROW), 0) != MAGIC_NUMBER;
            
            // Simple frictionless motion, elastic collision, and gravity simulation
            // Continuous collision detection, but with additional a-posteriori collision checks for robustness
        
            // Get position and velocity from the previous frame (which will be invalid if this is the first frame)
            vec4 p = texelFetch(iChannel1, ivec2(BUFFER_B_SPHERE_P0, BUFFER_B_MISC_DATA_ROW), 0);
            vec3 v = texelFetch(iChannel1, ivec2(BUFFER_B_SPHERE_V0, BUFFER_B_MISC_DATA_ROW), 0).xyz;
            
            // "time 0" is stored in p.w (time at which position was p.xyz, and velocity was v.xyz)
            // This value is being stored in a buffer that might use a 16-bit float format (e.g. on mobile), so it needs to be kept small.
            // Probably the best solution would have been to encode the full 32-bit float value (or a fixed point value) across multiple texture values,
            //      but I decided to try changing the code to work only with times in the interval (0,4) instead :)
            
            float use_time = mod(iTime, 4.);
            
            if (use_initial_data) {
                p = vec4(SPHERE_INITIAL_POSITION.xyz, use_time);
                v = SPHERE_INITIAL_VELOCITY;
            }
            
            if (use_time < p.w) {
                p.w -= 4.;
            }
            
            float t = use_time - p.w; // current time relative to "time 0"
            
            // Find any (or at most 4) collisions that occurred in time interval (0, t)
            // If no collisions, jump ahead (updating p and v) to keep time values small
            for (int itr = 0; itr < 4; itr++) {
                // Get times of possible collisions relative to "time 0"
                
                // Walls are easy (the open side of the box is treated like a glass wall)
                // Only checking for collision with side that the sphere is moving towards
                //      so it shouldn't be possible to get trapped.
                float t_inter_x = v.x < 0. ? (SPHERE_RADIUS-p.x) / v.x : (1. - SPHERE_RADIUS - p.x) / v.x;
                float t_inter_z = v.z < 0. ? (SPHERE_RADIUS-p.z) / v.z : (1. - SPHERE_RADIUS - p.z) / v.z;
                
                float t_inter_floor, t_inter_ceil;
                
                vec3 p2 = p.xyz + t*v.xyz;
                
                p2.y += 0.5*GRAVITY*t*t;
                    
                vec3 v2 = v + t*GRAVITY;
                
                // First check if the sphere has already gotten too close to the ceiling or floor, in which case immediately bounce
                if (p2.y > 1. - SPHERE_RADIUS - 1e-6) {
                    t_inter_floor = 1e20;
                    t_inter_ceil = t;
                } else if (p2.y < SPHERE_RADIUS + 1e-6) {
                    t_inter_floor = t;
                    t_inter_ceil = 1e20;
                } else {
                    // Otherwise, get intersection with floor and/or ceiling by solving quadratic equations
                    
                    float disc1 = v.y*v.y - 2.*GRAVITY*(p.y - SPHERE_RADIUS);
                    
                    // Check for collision with floor regardless of current velocity because trajectory can curve down
                    if (disc1 >= 0.) { // (There should always be two intersections unless the sphere fell through the floor somehow)
                        disc1 = sqrt(disc1);
                        
                        // Always want the later intersection (GRAVITY is negative, so this is the one where we subtract disc1)
                        t_inter_floor = (-v.y - disc1) / GRAVITY;
                        
                        // if t_inter_floor < 0, it means the sphere has fallen through the floor somehow
                        // this situation will be caught by the a-posteriori collision check
                    } else {
                        t_inter_floor = 1e20;
                    }
                    
                    float disc2 = v.y*v.y - 2.*GRAVITY*(p.y - 1. + SPHERE_RADIUS);
                    
                    // Check for collision with ceiling only if sphere is currently moving towards it
                    if (v2.y > 0. && disc2 >= 0.) {
                        disc2 = sqrt(disc2);
                        
                        // Always want the first intersection (GRAVITY is negative, so this is the one where we add disc2)
                        t_inter_ceil = (-v.y + disc2) / GRAVITY;
                        
                        // (if t_inter_ceil <= 0, it means the sphere has already gone through the ceiling somehow)
                    } else {
                        t_inter_ceil = 1e20;
                    }
                }
                
                // Get time of first collision
                float t_inter = min(min(t_inter_x, t_inter_z), min(t_inter_floor, t_inter_ceil));
                
                // If no collision before t, and t is large, advance "time 0" by some power of 2 value
                if (t_inter > t) {
                    if (t >= 4.) t_inter = 4.;
                    else if (t >= 2.) t_inter = 2.;
                    else if (t >= 1.) t_inter = 1.;
                    else if (t >= 0.5) t_inter = 0.5;
                    else if (t >= 0.25) t_inter = 0.25;
                }
                
                if (t_inter > t) {
                    break;
                }
                
                p.xzw += vec3(t_inter*v.xz, t_inter);
                p.y += t_inter*v.y + 0.5*GRAVITY*t_inter*t_inter;

                v.y += GRAVITY*t_inter;

                // Handle bounces by setting corresponding components of position and velocity, avoiding
                //     precision loss (for v.y anyway) by using absolute value of initial velocity.
            
                if (t_inter==t_inter_floor || p.y < SPHERE_RADIUS + 1e-6) {
                    v.y = abs(SPHERE_INITIAL_VELOCITY.y);
                    p.y = SPHERE_RADIUS;
                } else if (t_inter==t_inter_ceil || p.y > 1. - SPHERE_RADIUS - 1e-6) {
                    v.y = -abs(v.y);
                    p.y = 1. - SPHERE_RADIUS;
                }

                if ((t_inter==t_inter_x && v.x < 0.) || p.x < SPHERE_RADIUS + 1e-6) {
                    v.x = abs(SPHERE_INITIAL_VELOCITY.x);
                    p.x = SPHERE_RADIUS;
                } else if ((t_inter==t_inter_x && v.x > 0.) || p.x > 1. - SPHERE_RADIUS - 1e-6) {
                    v.x = -abs(SPHERE_INITIAL_VELOCITY.x);
                    p.x = 1. - SPHERE_RADIUS;
                }
                
                if ((t_inter==t_inter_z && v.z < 0.) || p.z < SPHERE_RADIUS + 1e-6) {
                    v.z = abs(SPHERE_INITIAL_VELOCITY.z);
                    p.z = SPHERE_RADIUS;
                } else if ((t_inter==t_inter_z && v.z > 0.) || p.z > 1. - SPHERE_RADIUS - 1e-6) {
                    v.z = -abs(SPHERE_INITIAL_VELOCITY.z);
                    p.z = 1. - SPHERE_RADIUS;
                }
                
                t = use_time - p.w;

                // repeat to handle literal corner cases
            }
            
            // Other shaders want the current sphere position
            vec3 new_p = p.xyz + t*v;
            
            new_p.y += 0.5*GRAVITY*t*t;
           
            if (x==BUFFER_B_SPHERE_P0) fragColor = p;
            else if (x==BUFFER_B_SPHERE_V0) fragColor = vec4(v, 0.);
            else if (x==BUFFER_B_SPHERE_CURRENT_POSITION) fragColor = vec4(new_p, 0.);
        } else if (y >= 1  && y < BUFFER_B_TOTAL_ROW_COUNT && x <= BUFFER_B_DATA_VALUES_MAX) {
            // Shift old "misc. data" values down so they are still available for subsequent passes
            
            // Find the lowest (oldest) row above this row that has valid values (helps avoid weirdness
            //      when starting to play the shader)
            
            int use_prev_y = y - 1;
            
            for ( ; use_prev_y >= 0; use_prev_y--) {
                if (use_prev_y < iFrame && texelFetch(iChannel1, ivec2(BUFFER_B_MAGIC_NUMBER, use_prev_y), 0) == MAGIC_NUMBER) {
                    break;
                }
            }
            
            if (use_prev_y >= 0) { // Copy value from older row
                fragColor = texelFetch(iChannel1, ivec2(x, use_prev_y), 0);
            } else { // Use initial value instead
                if (x == BUFFER_B_MAGIC_NUMBER) {
                    fragColor = MAGIC_NUMBER;
                } else if (x == BUFFER_B_LIGHT_DATA) {
                    vec2 val = intBitsToFloat(pack_light_info(LIGHT_SIDE_INITIAL, LIGHT_I_MINMAX_INITIAL, LIGHT_J_MINMAX_INITIAL));                    
                    
                    fragColor = vec4(val, val);
                } else if (x == BUFFER_B_SPHERE_CURRENT_POSITION) {
                    fragColor = vec4(SPHERE_INITIAL_POSITION, 0.);
                }
            }
        } else {
            fragColor = vec4(0);
        }
        
        return;
    }

    int pass_number = y >> MESH_SQUARE_ROWS_SHIFT;
    
    y &= MESH_SQUARE_ROWS - 1;
    
    // The block of values after the final pass output just stores a copy (with no
    //      series acceleration) of the last pass's data
    bool store_final_pass_value = pass_number > FINAL_PASS_NUMBER;
    
    pass_number = min(pass_number, FINAL_PASS_NUMBER);
    
    bool is_sphere = x >= MESH_X_OFFSET_SPHERE;

    int base = is_sphere ? MESH_X_OFFSET_SPHERE : (x & ~(MESH_SQUARE_COLUMNS-1));
    int columns = is_sphere ? MESH_SPHERE_COLUMNS : MESH_SQUARE_COLUMNS;
    
    int x_orig = x;
    
    x -= base;
    base *= MESH_SQUARE_ROWS;

    int receiving_patch_index = base + y*columns + x;
    
    // Get radiant exitance (emitted component of radiosity) if any
    // This is not included in the output value, but needs to be subtracted from the previous passes' values for series acceleration
    // (or could include it in this pass's value temporarily, but then would need to subtract it again)
    vec3 emitted_radiosity = vec3(0.);
    
    {
        int light_side;
        ivec2 light_i_minmax, light_j_minmax;
        
        if (iFrame == 0) { 
            light_side = LIGHT_SIDE_INITIAL;
            light_i_minmax = LIGHT_I_MINMAX_INITIAL;
            light_j_minmax = LIGHT_J_MINMAX_INITIAL;
        } else {
            ivec2 val = floatBitsToInt(texelFetch(iChannel1, ivec2(BUFFER_B_LIGHT_DATA, BUFFER_B_MISC_DATA_ROW + pass_number), 0).xy);
            
            light_side = unpack_light_side(val.x);
            light_i_minmax = unpack_light_minmax(val.x);
            light_j_minmax = unpack_light_minmax(val.y);
        }
        
        if (base == light_side*MESH_COUNT_SQUARE && x >= light_j_minmax.x && x <= light_j_minmax.y && y >= light_i_minmax.x && y <= light_i_minmax.y) {
            emitted_radiosity = get_light_scale(light_i_minmax, light_j_minmax) * LIGHT_AMOUNT;
        }
    }
    
    vec3 val = vec3(0);
    
    {
        float scale = PATCH_FLUX_DECODE_SCALE / area_for_patch(receiving_patch_index);

        vec3 pass_val = scale*texelFetch(iChannel0, ivec2(x_orig, y + pass_number*MESH_SPHERE_ROWS), 0).rgb - emitted_radiosity;

        val = pass_val;

        #if USE_SERIES_ACCELERATION && TOTAL_PASSES <= 9
        if (pass_number <= 9 && ! store_final_pass_value) {
            // Get value computed so far
            if (pass_number > 0) {
                val = texelFetch(iChannel1, ivec2(x_orig, y + (pass_number-1)*MESH_SPHERE_ROWS), 0).rgb;
            } else {
                val = vec3(0);
            }
            
            // Add another term to the value
            
            float pass_coeff = 0.;
                
            switch (TOTAL_PASSES) {
                case 2:
                    pass_coeff = pass_number == 0 ? 0. : 1.55648131;
                    break;
                case 3:
                    pass_coeff = pass_number == 0 ? 0. : (pass_number == 1 ? -1.04410677 : 2.33088677);
                    break;
                case 4:
                    pass_coeff = pass_number == 0 ? 0. : (pass_number == 1 ? -0.3501546 : (pass_number == 2 ? -2.81371846 : 3.91354126));
                    break;
                case 5:
                    // Using same coefficients here as in the low latency version of this shader
                    pass_coeff = pass_number == 0 ? 0. : (pass_number == 1 ? 0.5 : (pass_number == 2 ? 0. : (pass_number == 3 ? -4.65 : 5.15)));
                    break;
                case 6:
                    pass_coeff = pass_number == 0 ? 0. : (pass_number == 1 ? -0.15431121 : (pass_number == 2 ? 1.22304458 : (pass_number == 3 ? 0.82183848 : (pass_number == 4 ? -8.54643738 : 7.68658215))));
                    break;
                case 7:
                    pass_coeff = pass_number == 0 ? 0. : (pass_number == 1 ? -0.12238599 : (pass_number == 2 ? -0.23040211 : (pass_number == 3 ? 2.29687337 : (pass_number == 4 ? 0.39079672 : (pass_number == 5 ? -10.73858488 : 9.39628568)))));
                    break;
                case 8:
                    pass_coeff = pass_number == 0 ? 0. : (pass_number == 1 ? 0.0501386 : (pass_number == 2 ? -0.42917315 : (pass_number == 3 ? -0.57671934 : (pass_number == 4 ? 4.85683415 : (pass_number == 5 ? -0.84644954 : (pass_number == 6 ? -13.93106196 : 11.86946711 ))))));
                    break;
                case 9:
                    pass_coeff = pass_number == 0 ? 0. : (pass_number == 1 ? 0.03361997 : (pass_number == 2 ? 0.09671265 : (pass_number == 3 ? -0.98298705 : (pass_number == 4 ? -0.64599411 : (pass_number == 5 ? 7.91240836 : (pass_number == 6 ? -3.29352597 : (pass_number == 7 ? -16.13602052 : 14.01715472) ))))));
                    break;
            }
            
            val += pass_coeff * pass_val;
        }
        #endif
    }

    fragColor = vec4(val, 1.0);
}

